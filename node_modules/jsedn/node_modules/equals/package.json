{
  "name": "equals",
  "version": "0.3.6",
  "description": "Check if two values are deeply equivalent",
  "dependencies": {
    "type": "jkroso/type#1.1.0"
  },
  "devDependencies": {
    "serve": "jkroso/serve#1.5.3",
    "mocha": "*",
    "jsmd": "*",
    "chai": "*"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/jkroso/equals.git"
  },
  "bugs": {
    "url": "https://github.com/jkroso/equals/issues"
  },
  "keywords": [
    "equality",
    "equal",
    "same",
    "equivalent",
    "equivalence",
    "="
  ],
  "files": [
    "index.js"
  ],
  "author": {
    "name": "Jake Rosoman"
  },
  "license": "MIT",
  "readme": "\n# equals\n\n  compare values of any complexity for equivalence\n\n## Installation\n\nWith your favorite package manager:\n\n- [packin](//github.com/jkroso/packin): `packin add equals`\n- [component](//github.com/component/component#installing-packages): `component install jkroso/equals`\n- [npm](//npmjs.org/doc/cli/npm-install.html): `npm install equals`\n\nthen in your app:\n\n```js\nvar equals = require('equals')\n```\n\n## API\n\n### equals(...)\n\nequals takes as many arguments as you like of any type you like and returns a boolean result. Primitive types are equal if they are equal. While composite types, i.e. Objects and Arrays, are considered equal if they have both the same structure and the same content. Specifically that means the same set of keys each pointing to the same values. Composite structures can be as big as you like and and circular references are perfectly safe.\n\nSame structure:\n```js\nequals(\n  { a : [ 2, 3 ], b : [ 4 ] },\n  { a : [ 2, 3 ], b : [ 4 ] }\n) // => true\n```\n\nDifferent Structure:\n```js\nequals(\n  { x : 5, y : [6] },\n  { x : 5}\n) // => false\n```\n\nSame structure, different values:\n\n```js\nequals(\n  { a: [ 1, 2 ], b : [ 4 ]},\n  { a: [ 2, 3 ], b : [ 4 ]}\n) // => false\n```\n  \nPrimitives:\n\n```js\nequals(new Date(0), new Date(0), new Date(1)) // => false\n```\n    \nSome possible gotchas:\n- `null` __is not__ equal to `undefined`.\n- `NaN` __is__ equal to `NaN` (normally not the case).  \n- `-0` __is__ equal to `+0`.\n- Strings will __not__ coerce to numbers.\n- Non enumerable properties will not be checked. They can't be.\n- `arguments.callee` is not considered when comparing arguments\n\n### compare(a, b)\n\n  compare two values. \n\n```js\nequals.compare({}, {}) // => true\n```",
  "readmeFilename": "Readme.md",
  "_id": "equals@0.3.6",
  "_from": "equals@latest"
}
